// Code generated by MockGen. DO NOT EDIT.
// Source: ../agentpools.go
//
// Generated by this command:
//
//	mockgen -destination agentpools_mock.go -package mock_services -source ../agentpools.go AgentPoolsClientInterface
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	containerservice "github.com/Azure/azure-sdk-for-go/services/containerservice/mgmt/2020-11-01/containerservice"
	gomock "go.uber.org/mock/gomock"
)

// MockAgentPoolsClientInterface is a mock of AgentPoolsClientInterface interface.
type MockAgentPoolsClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAgentPoolsClientInterfaceMockRecorder
}

// MockAgentPoolsClientInterfaceMockRecorder is the mock recorder for MockAgentPoolsClientInterface.
type MockAgentPoolsClientInterfaceMockRecorder struct {
	mock *MockAgentPoolsClientInterface
}

// NewMockAgentPoolsClientInterface creates a new mock instance.
func NewMockAgentPoolsClientInterface(ctrl *gomock.Controller) *MockAgentPoolsClientInterface {
	mock := &MockAgentPoolsClientInterface{ctrl: ctrl}
	mock.recorder = &MockAgentPoolsClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentPoolsClientInterface) EXPECT() *MockAgentPoolsClientInterfaceMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockAgentPoolsClientInterface) CreateOrUpdate(ctx context.Context, resourceGroupName, clusterName, agentPoolName string, parameters containerservice.AgentPool) (containerservice.AgentPoolsCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, clusterName, agentPoolName, parameters)
	ret0, _ := ret[0].(containerservice.AgentPoolsCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockAgentPoolsClientInterfaceMockRecorder) CreateOrUpdate(ctx, resourceGroupName, clusterName, agentPoolName, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockAgentPoolsClientInterface)(nil).CreateOrUpdate), ctx, resourceGroupName, clusterName, agentPoolName, parameters)
}

// Delete mocks base method.
func (m *MockAgentPoolsClientInterface) Delete(ctx context.Context, resourceGroupName, clusterName, agentPoolName string) (containerservice.AgentPoolsDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, clusterName, agentPoolName)
	ret0, _ := ret[0].(containerservice.AgentPoolsDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentPoolsClientInterfaceMockRecorder) Delete(ctx, resourceGroupName, clusterName, agentPoolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentPoolsClientInterface)(nil).Delete), ctx, resourceGroupName, clusterName, agentPoolName)
}
