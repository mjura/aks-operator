// Code generated by MockGen. DO NOT EDIT.
// Source: ../managedclusters.go
//
// Generated by this command:
//
//	mockgen -destination managedclusters_mock.go -package mock_services -source ../managedclusters.go ManagedClustersClientInterface
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	containerservice "github.com/Azure/azure-sdk-for-go/services/containerservice/mgmt/2020-11-01/containerservice"
	gomock "go.uber.org/mock/gomock"
)

// MockManagedClustersClientInterface is a mock of ManagedClustersClientInterface interface.
type MockManagedClustersClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockManagedClustersClientInterfaceMockRecorder
}

// MockManagedClustersClientInterfaceMockRecorder is the mock recorder for MockManagedClustersClientInterface.
type MockManagedClustersClientInterfaceMockRecorder struct {
	mock *MockManagedClustersClientInterface
}

// NewMockManagedClustersClientInterface creates a new mock instance.
func NewMockManagedClustersClientInterface(ctrl *gomock.Controller) *MockManagedClustersClientInterface {
	mock := &MockManagedClustersClientInterface{ctrl: ctrl}
	mock.recorder = &MockManagedClustersClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedClustersClientInterface) EXPECT() *MockManagedClustersClientInterfaceMockRecorder {
	return m.recorder
}

// AsyncUpdateTagsResult mocks base method.
func (m *MockManagedClustersClientInterface) AsyncUpdateTagsResult(asyncRet containerservice.ManagedClustersUpdateTagsFuture) (containerservice.ManagedCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncUpdateTagsResult", asyncRet)
	ret0, _ := ret[0].(containerservice.ManagedCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AsyncUpdateTagsResult indicates an expected call of AsyncUpdateTagsResult.
func (mr *MockManagedClustersClientInterfaceMockRecorder) AsyncUpdateTagsResult(asyncRet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncUpdateTagsResult", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).AsyncUpdateTagsResult), asyncRet)
}

// CreateOrUpdate mocks base method.
func (m *MockManagedClustersClientInterface) CreateOrUpdate(ctx context.Context, resourceGroupName, clusterName string, parameters containerservice.ManagedCluster) (containerservice.ManagedClustersCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, resourceGroupName, clusterName, parameters)
	ret0, _ := ret[0].(containerservice.ManagedClustersCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockManagedClustersClientInterfaceMockRecorder) CreateOrUpdate(ctx, resourceGroupName, clusterName, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).CreateOrUpdate), ctx, resourceGroupName, clusterName, parameters)
}

// Delete mocks base method.
func (m *MockManagedClustersClientInterface) Delete(ctx context.Context, resourceGroupName, clusterName string) (containerservice.ManagedClustersDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceGroupName, clusterName)
	ret0, _ := ret[0].(containerservice.ManagedClustersDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockManagedClustersClientInterfaceMockRecorder) Delete(ctx, resourceGroupName, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).Delete), ctx, resourceGroupName, clusterName)
}

// Get mocks base method.
func (m *MockManagedClustersClientInterface) Get(ctx context.Context, resourceGroupName, clusterName string) (containerservice.ManagedCluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, resourceGroupName, clusterName)
	ret0, _ := ret[0].(containerservice.ManagedCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockManagedClustersClientInterfaceMockRecorder) Get(ctx, resourceGroupName, clusterName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).Get), ctx, resourceGroupName, clusterName)
}

// GetAccessProfile mocks base method.
func (m *MockManagedClustersClientInterface) GetAccessProfile(ctx context.Context, resourceGroupName, resourceName, roleName string) (containerservice.ManagedClusterAccessProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessProfile", ctx, resourceGroupName, resourceName, roleName)
	ret0, _ := ret[0].(containerservice.ManagedClusterAccessProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessProfile indicates an expected call of GetAccessProfile.
func (mr *MockManagedClustersClientInterfaceMockRecorder) GetAccessProfile(ctx, resourceGroupName, resourceName, roleName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessProfile", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).GetAccessProfile), ctx, resourceGroupName, resourceName, roleName)
}

// UpdateTags mocks base method.
func (m *MockManagedClustersClientInterface) UpdateTags(ctx context.Context, resourceGroupName, resourceName string, parameters containerservice.TagsObject) (containerservice.ManagedClustersUpdateTagsFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", ctx, resourceGroupName, resourceName, parameters)
	ret0, _ := ret[0].(containerservice.ManagedClustersUpdateTagsFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags.
func (mr *MockManagedClustersClientInterfaceMockRecorder) UpdateTags(ctx, resourceGroupName, resourceName, parameters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).UpdateTags), ctx, resourceGroupName, resourceName, parameters)
}

// WaitForTaskCompletion mocks base method.
func (m *MockManagedClustersClientInterface) WaitForTaskCompletion(arg0 context.Context, arg1 containerservice.ManagedClustersDeleteFuture) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTaskCompletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForTaskCompletion indicates an expected call of WaitForTaskCompletion.
func (mr *MockManagedClustersClientInterfaceMockRecorder) WaitForTaskCompletion(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTaskCompletion", reflect.TypeOf((*MockManagedClustersClientInterface)(nil).WaitForTaskCompletion), arg0, arg1)
}
